Практическое задание по теме “CRUD - операции”
1. Повторить все действия по доработке БД vk.
CREATE DATABASE vk;
USE vk;


DROP TABLE profiles;
CREATE TABLE profiles (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
  user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на пользователя",  
  gerder ENUM('M', 'F', '?') COMMENT "Пол",
  birthday DATE COMMENT "Дата рождения",
  photo_id INT UNSIGNED COMMENT "Ссылка на основную фотографию пользователя",
      `status` ENUM('online', 'offline', 'disabled') COMMENT "Текущий статус",
  city VARCHAR(130) COMMENT "Город проживания",
  country VARCHAR(130) COMMENT "Страна проживания",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Профили"; 
CREATE TABLE users (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", -- искусственный ключ
  first_name VARCHAR(100) NOT NULL COMMENT "Имя пользователя",
  last_name VARCHAR(100) NOT NULL COMMENT "Фамилия пользователя",
  email VARCHAR(100) NOT NULL UNIQUE COMMENT "Почта",
  phone CHAR(11) NOT NULL UNIQUE COMMENT "Телефон",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Пользователи";  


ALTER TABLE profiles ADD CONSTRAINT profiles_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE profiles ADD CONSTRAINT profiles_photo_id FOREIGN KEY (photo_id) REFERENCES media(id);
ALTER TABLE users MODIFY phone VARCHAR(12) NOT NULL UNIQUE;
ALTER TABLE users ADD COLUMN phone VARCHAR(12) UNIQUE; 
ALTER TABLE users DROP COLUMN phone; 


CREATE TABLE friendship (
        user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на пользователя", 
        friend_id INT UNSIGNED NOT NULL COMMENT "Ссылка на друга пользователя", 
    request_type VARCHAR(10) NOT NULL COMMENT "Тип запроса",
        requested_at DATETIME DEFAULT NOW() COMMENT "Время отправления приглашения дружить",
        confirmed_at DATETIME COMMENT "Время подтверждения приглашения",
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки",
    PRIMARY KEY (user_id, friend_id)
);
ALTER TABLE friendship ADD CONSTRAINT friendship_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE friendship ADD CONSTRAINT friendship_friend_id FOREIGN KEY (friend_id) REFERENCES users(id);


ALTER TABLE friendship DROP COLUMN request_type;
ALTER TABLE friendship ADD COLUMN request_type_id INT UNSIGNED NOT NULL COMMENT "Ссылка на тип запроса";


CREATE TABLE friendship_request_types (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", 
  name VARCHAR(150) NOT NULL UNIQUE COMMENT "Название статуса",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"  
) COMMENT "Типы запроса на дружбы";


ALTER TABLE friendship ADD CONSTRAINT friendship_request_type_id FOREIGN KEY (request_type_id) REFERENCES friendship_request_types(id); 


CREATE TABLE communities (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор сроки",
  name VARCHAR(150) NOT NULL UNIQUE COMMENT "Название группы",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"  
) COMMENT "Группы";


CREATE TABLE communities_users (
  community_id INT UNSIGNED NOT NULL COMMENT "Ссылка на группу",
  user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на пользователя",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки", 
  PRIMARY KEY (community_id, user_id) COMMENT "Составной первичный ключ"
) COMMENT "Участники групп, связь между пользователями и группами";


ALTER TABLE communities_users ADD CONSTRAINT communities_users_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE communities_users ADD CONSTRAINT communities_users_community_id_id FOREIGN KEY (community_id) REFERENCES communities(id);


CREATE TABLE messages (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", 
  from_user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на отправителя сообщения",
  to_user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на получателя сообщения",
  body TEXT NOT NULL COMMENT "Текст сообщения",
  is_important BOOLEAN COMMENT "Признак важности",
  is_delivered BOOLEAN COMMENT "Признак доставки",
  created_at DATETIME DEFAULT NOW() COMMENT "Время создания строки",
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Сообщения";


ALTER TABLE messages ADD CONSTRAINT messages_from_user_id FOREIGN KEY (from_user_id) REFERENCES users(id);
ALTER TABLE messages ADD CONSTRAINT messages_to_user_id FOREIGN KEY (to_user_id) REFERENCES users(id);


CREATE TABLE media (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", 
        filename VARCHAR(255) NOT NULL UNIQUE COMMENT "Путь к файлу",
    media_type_id INT UNSIGNED NOT NULL COMMENT "Ссылка на тип файла",
    size INT NOT NULL COMMENT "Размер файла",
    created_at DATETIME DEFAULT NOW() COMMENT "Время создания строки",
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Медиафайлы";
CREATE TABLE media_types (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
  name VARCHAR(255) NOT NULL UNIQUE COMMENT "Название типа",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Типы медиафайлов";


ALTER TABLE media ADD CONSTRAINT media_media_type_id FOREIGN KEY (media_type_id) REFERENCES media_types(id);
ALTER TABLE media ADD COLUMN metadata JSON;
ALTER TABLE media_types ADD COLUMN user_id INT UNSIGNED NOT NULL;
ALTER TABLE media_types ADD CONSTRAINT media_type_user_id FOREIGN KEY (user_id) REFERENCES users(id);


2. Заполнить новые таблицы.


Table
	Rows
	Options
	messages
	100
	Generate
	profiles
	100
	View Data JSON CSV
	media
	100
	View Data JSON CSV
	users
	100
	View Data JSON CSV
	friendship_request_types
	100
	View Data JSON CSV
	communities
	100
	View Data JSON CSV
	media_types
	100
	View Data JSON CSV
	friendship
	100
	Generate
	communities_users
	100
	View Data JSON CSV
	http://filldb.info/dummy/step3
ПОлучил SQL скрипт и заполнил все таблицы в базе. примера заполненности табличек на примере users, profiles
mysql> desc table users;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
|  1 | SIMPLE      | users | NULL       | ALL  | NULL          | NULL | NULL    | NULL |  100 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
1 row in set, 1 warning (0,00 sec)


mysql> desc table users;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
|  1 | SIMPLE      | users | NULL       | ALL  | NULL          | NULL | NULL    | NULL |  100 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
1 row in set, 1 warning (0,00 sec)


И так далее


3. Повторить все действия CRUD.
USE INFORMATION_SCHEMA;
SELECT * FROM TABLES WHERE TABLE_SCHEMA = 'vk';


def        vk        communities        BASE TABLE        InnoDB        10        Dynamic        100        163        16384        0        16384        0        101        2021-09-15 17:43:40        2021-09-16 17:34:49                utf8mb4_0900_ai_ci                        Группы
def        vk        communities_users        BASE TABLE        InnoDB        10        Dynamic        100        163        16384        0        16384        0                2021-09-15 17:44:41        2021-09-16 17:34:49                utf8mb4_0900_ai_ci                        Участники групп, связь между пользователями и группами
def        vk        friendship        BASE TABLE        InnoDB        10        Dynamic        100        163        16384        0        32768        0                2021-09-15 17:43:20        2021-09-16 17:35:47                utf8mb4_0900_ai_ci                        
def        vk        friendship_request_types        BASE TABLE        InnoDB        10        Dynamic        100        163        16384        0        16384        0        101        2021-09-15 17:42:54        2021-09-16 17:35:39                utf8mb4_0900_ai_ci                        Типы запроса на дружбы
def        vk        media        BASE TABLE        InnoDB        10        Dynamic        100        163        16384        0        32768        0        101        2021-09-15 18:39:32        2021-09-16 17:35:28                utf8mb4_0900_ai_ci                        Медиафайлы
def        vk        media_types        BASE TABLE        InnoDB        10        Dynamic        100        163        16384        0        32768        0        101        2021-09-15 19:59:29        2021-09-16 17:35:14                utf8mb4_0900_ai_ci                        Типы медиафайлов
def        vk        messages        BASE TABLE        InnoDB        10        Dynamic        100        491        49152        0        32768        0        101        2021-09-15 17:45:04        2021-09-16 17:34:24                utf8mb4_0900_ai_ci                        Сообщения
def        vk        profiles        BASE TABLE        InnoDB        10        Dynamic        100        163        16384        0        16384        0        101        2021-09-15 14:50:04        2021-09-16 17:02:57                utf8mb4_0900_ai_ci                        Профили
def        vk        users        BASE TABLE        InnoDB        10        Dynamic        100        163        16384        0        32768        0        101        2021-09-15 14:44:36        2021-09-16 17:01:39                utf8mb4_0900_ai_ci                        Пользователи
SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = 'vk';
'def', 'vk', 'name', 'vk', 'communities', 'UNIQUE', 'YES'
'def', 'vk', 'PRIMARY', 'vk', 'communities', 'PRIMARY KEY', 'YES'
'def', 'vk', 'PRIMARY', 'vk', 'communities_users', 'PRIMARY KEY', 'YES'
'def', 'vk', 'communities_users_community_id_id', 'vk', 'communities_users', 'FOREIGN KEY', 'YES'
'def', 'vk', 'communities_users_user_id', 'vk', 'communities_users', 'FOREIGN KEY', 'YES'
'def', 'vk', 'PRIMARY', 'vk', 'friendship', 'PRIMARY KEY', 'YES'
'def', 'vk', 'friendship_friend_id', 'vk', 'friendship', 'FOREIGN KEY', 'YES'
'def', 'vk', 'friendship_request_type_id', 'vk', 'friendship', 'FOREIGN KEY', 'YES'
'def', 'vk', 'friendship_user_id', 'vk', 'friendship', 'FOREIGN KEY', 'YES'
'def', 'vk', 'name', 'vk', 'friendship_request_types', 'UNIQUE', 'YES'
'def', 'vk', 'PRIMARY', 'vk', 'friendship_request_types', 'PRIMARY KEY', 'YES'
'def', 'vk', 'filename', 'vk', 'media', 'UNIQUE', 'YES'
'def', 'vk', 'PRIMARY', 'vk', 'media', 'PRIMARY KEY', 'YES'
'def', 'vk', 'media_media_type_id', 'vk', 'media', 'FOREIGN KEY', 'YES'
'def', 'vk', 'name', 'vk', 'media_types', 'UNIQUE', 'YES'
'def', 'vk', 'PRIMARY', 'vk', 'media_types', 'PRIMARY KEY', 'YES'
'def', 'vk', 'media_type_user_id', 'vk', 'media_types', 'FOREIGN KEY', 'YES'
'def', 'vk', 'PRIMARY', 'vk', 'messages', 'PRIMARY KEY', 'YES'
'def', 'vk', 'messages_from_user_id', 'vk', 'messages', 'FOREIGN KEY', 'YES'
'def', 'vk', 'messages_to_user_id', 'vk', 'messages', 'FOREIGN KEY', 'YES'
'def', 'vk', 'PRIMARY', 'vk', 'profiles', 'PRIMARY KEY', 'YES'
'def', 'vk', 'profiles_user_id', 'vk', 'profiles', 'FOREIGN KEY', 'YES'
'def', 'vk', 'email', 'vk', 'users', 'UNIQUE', 'YES'
'def', 'vk', 'phone', 'vk', 'users', 'UNIQUE', 'YES'
'def', 'vk', 'PRIMARY', 'vk', 'users', 'PRIMARY KEY', 'YES'
UPDATE users SET phone = CONCAT('+7', 9000000000 + FLOOR(999999999 * RAND())) WHERE id < 200;
4. Подобрать сервис-образец для курсовой работы.
Я долго думал что выбрать. С одной стороны я бы выбрал кейс с работы. Но там не то что сервис там около 10 источников ( IT системы)
Вот описание в такой форме (не уверен что понятно) 
Сецчас это все в итоге одна плоская табилца
Название колонки
	Источник/формула
	Понятие
	Order
	1С - поле "Номер"
	Номер заказа из 1С (поле 
	initial
	Файл планирования заказов G:\MBTV\066100_Orders_planning\Orders
	Партия, состоящая из группы заказов
	CKD/CBU
	1С - поле "СКД"; Файл планирования заказов G:\MBTV\066100_Orders_planning\Orders
	Где была собрана машина: CBU - DaG; CKD - сбока в НЧ, кабина немецкая, CiW - кабина и сборка НЧ
	AFAB
	Если есть нормер заказа, то "Да", в противном случае - нет
	Размещен ли заказ в системе AFAB
	Types
	Файл планирования заказов G:\MBTV\066100_Orders_planning\Orders
	Модель, которую планируют размещать
	Model 1C
	1С - поле "Модель"
	Модель, которую разместили в 1С
	Model Correct
	Поля Types или Модель 1С
	Сокращенная версия модели
	MP3/SFTP
	По справочнику G:\MBTV\063500_Market intelligence\Справочники
	К какому типу модели относится данная модель MP3 - старый тип, SFTP - новый модельный ряд
	Dep
	Файл планирования заказов G:\MBTV\066100_Orders_planning\Orders
	Департамент, на который планируют размещать
	Seller
	1С - поле "Продавец"
	За кем закреплен заказ или же кто является продавцом данного заказа
	Dep 1C
	По справочнику G:\MBTV\063500_Market intelligence\Справочники
	К какому отделу продаж относится продавец
	

Body builder
	1С - поле "Кузовостроитель"
	Кузовостроитель
	Dealer
	1С - поле "Дилер"
	Дилер
	Customer 1C
	1С - поле "Клиент"
	Клиент, на которого разместили заказ или же на кого был продан а/м
	Customer 1C eng
	По справочнику G:\MBTV\063500_Market intelligence\Справочники
	Клиент, на которого разместили заказ или же на кого был продан а/м в транскрипции
	Customer from report orders
	Файл планирования заказов G:\MBTV\066100_Orders_planning\Orders
	Клиент, на которого  планируют размещать
	Check Pack Year/Month with AFAB
	AFAB (DD Quota)
	Проверка месяца упаковки/производства по AFAB
	Pack Year 2018
	Для каждого текущего года актуальны свои года и месяцы упаковки.
Информация по стоку берется из файла контролинга на 01/01/хх года, остальное - из Файл планирования заказов G:\MBTV\066100_Orders_planning\Orders
	Сток на 01/01/хх года всегда остается одним и тем же и не меняется, а остальные заказы добавляются в течение года. По истечению года, в случае, если машина не была продана, переходит в сток следующего года и т.д.
	Pack Month 2018
	Pack Year 2019
	Pack Month 2019
	Deliv 2019 (as KUFRI)
	Pack Year 2020
	Pack Month 2020
	Deliv 2020 (as KUFRI)
	Pack Year 2021
	Pack Month 2021 (as KUFRI)
	Status
	Если есть дата продажи, то Sold, если есть в списке Stock, то Stock, в противном случае Orders
	Каждый заказ может иметь только 1 статус:
или Sold - значит, что машина отгружена (продана), Stock - значит стоит на стоке DK RUS (инвойсирована, но не продана) B статус Order (не инвойсирована)
	Date of sales
	1С - поле "Дата продажи"
	Дата продажи а/м
	Sales Year
	От поля "Date of sales"
	Год продажи а/м
	Sales Month
	От поля "Date of sales"
	Месяц продажи а/м
	Volume Ord
	Если Есть номер заказа, то 1
	Для расчета количества заказов
	Volume Sales
	Если есть дата продажи, то 1, в противном случае 0
	Для расчета количества проданных а/м
	VIN
	AFAB - поле VIN; 1С - поле "VIN"
	VIN Номер а/м. Он уникален
	Prod Wörth
	AFAB поле Plant completion
	Дата производства KIT's в DAG
	Prod N Ch
	1С - поле "Сборка НЧ факт"
	Дата сборки а/м в НЧ (актуально только для CKD)
	Dateof Body
	1С - поле "Доработка факт"
	Дата окузовления
	Spec
	Отчет SPEC из 1С
	Набор кодов, которые формируют спецификацию
	ADR
	Определяется по кодам C5A; E5G; E5V
	Система перевозки опасных грузов
	Segment 2
	По справочнику G:\MBTV\063500_Market intelligence\Справочники
	К какому сегменту относится данная модель
	Invoicing month
	Информация приходит ежемесячно от контроллинга
	Месяц инвойсирования
	Baumuster
	С 5 по 7 символ VIN кода
	Цифровой код, обозначающий модель и его конфигрурацию
	Tires
	Определяется по кодам из поля 1С 
	Фирма шин
	Tires R
	Определяется по кодам из поля Spec R1I; R3Q; R3P по справочнику
	Радиус колес
	Colors ID
	1С - поле "Paintwork field"
	цифровой код цвета кабины
	Colors
	G:\MBTV\063500_Market intelligence\Справочники
	цвет кабины
	Order Status
	1С - поле "Статус"
	Статус заказа в 1С
	Demo_Stock
	Файл по стоку ДК РУС от контролинга
	Демо машины
	Old_Stock
	Сток >550 дней на стоке
	Status of readiness_Stock
	Статус готовности а/м (Ready for sales - готов к продаже, Not ready - не готов к продаже)
	Reserve_Stock
	Стоит ли машина в резерве
	Prepaid/not prepaid_Stock
	Предоплачено или нет
	Days on Stock
	Дней на стоке
	Check from AFAB
	AFAB
	Проверяет корректность CK - CKD/CiW; CB - CBU
	ID
	по формуле (если дата продажи ранее текущего года, то 0, иначе 1
	отфильтровывает все, что не нужно отслеживать в этом году, оставляет только ресурсы текущего года - сток на 01/01 и все заказытекущего года
	Code for Cab
	G:\MBTV\063500_Market intelligence\Справочники по полю SPEC
	Отражает код кабины
	ID check
	По полю SPEC выделяет коды D0Y; F9R; U8D; U8Z
	Проверка корректности CiW
	Decoding
	SAP / поле Материал
	Присвоение заказу определенного кода, необходимый закупкам
	Engine
	1С - поле "Номер двигателя"
	Номер двигателя
	subc
	AFAB
	Номер субкатегории
	Body_Date
	1С - поле "Доработка (факт)"
	Проверка статуса готовности а/м
	VIN2
	1С - поле "Новый VIN"
	Отражает новый VIN, который присваивается после окузовления
	PL Subs
	Файл планирования заказов G:\MBTV\066100_Orders_planning\Orders
	Планируемая субсидия
	Act Subs
	 
	Актуальная субсидия после проверки инвойсов
	Fin_Subs
	 
	Субсидия финальная, которую берем врасчет
	



Роман скажи если сложно то можно перейти к альтернативе ниже:) 
Альтернатива для того чтоб разобраться можно выбрать
https://www.airbnb.ru/